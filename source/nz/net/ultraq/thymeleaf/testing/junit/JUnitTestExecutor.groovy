/* 
 * Copyright 2015, Emanuel Rabina (http://www.ultraq.net.nz/)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package nz.net.ultraq.thymeleaf.testing.junit

import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource
import org.thymeleaf.dialect.IDialect
import org.thymeleaf.testing.templateengine.context.IProcessingContextBuilder
import org.thymeleaf.testing.templateengine.context.web.WebProcessingContextBuilder
import org.thymeleaf.testing.templateengine.engine.TestExecutor
import org.thymeleaf.testing.templateengine.report.ConsoleTestReporter
import org.thymeleaf.testing.templateengine.report.ITestReporter
import static org.junit.jupiter.api.Assertions.*

/**
 * An abstract Thymeleaf test file executor, contains the basics for specifying
 * a set of Thymeleaf test files to each be executed as if it were its own JUnit
 * test.
 * <p>
 * If you need some control over which Thymeleaf test files get run, you can
 * extend this class and then specify your own `getThymeleafTestFiles` method,
 * which is a factory method that returns the list of files to execute:
 * <pre><code>
 * public class MyDialectTestExecutor extends JUnitTestExecutor {
 * 
 *   {@code
 *   public static List<String> getThymeleafTestFiles() {
 *     List<String> thymeleafTestFiles = new ArrayList<>();
 *     thymeleafTestFiles.add("com/mysite/myproject/MyTest1.thtest");
 *     thymeleafTestFiles.add("com/mysite/myproject/MyTest2.thtest");
 *     return thymeleafTestFiles;
 *   }}
 * }
 * </code></pre>
 * Extending this class is most useful if you need to configure a different set
 * of dialects for different tests.
 * 
 * @author Emanuel Rabina
 */
abstract class JUnitTestExecutor {

	/**
	 * Run the Thymeleaf test executor over a single test file, asserting the
	 * result was OK (execution result matched the expected output).
	 * <p>
	 * Test files are generated by a required static factory method,
	 * {@code getThymeleafTestFiles}, which is a parameterless method that returns
	 * a "stream" of strings identifying the test file in the classpath.  JUnit's
	 * definition of stream can be found on their docs:
	 * https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests-sources-MethodSource
	 */
	@ParameterizedTest(name = '{0}')
	@MethodSource('getThymeleafTestFiles')
	void executeThymeleafTestFile(String testFile) {

		def testExecutor = new TestExecutor(
			dialects: testDialects,
			processingContextBuilder: testProcessingContextBuilder,
			reporter: new JUnitTestReporter(testReporter)
		)
		testExecutor.execute("classpath:${testFile}")
		assertTrue(testExecutor.reporter.lastResult.ok)
	}

	/**
	 * Return a list of additional dialects to use in testing.  The Thymeleaf
	 * Standard dialect is always included.
	 * 
	 * @return List of additional dialects to test with.
	 */
	protected abstract List<? extends IDialect> getTestDialects()

	/**
	 * Return the {@code IProcessingContextBuilder} to be used by the test
	 * executor for the test files.  Useful for providing Spring-related context
	 * builders.  Defaults to the standard {@code WebProcessingContextBuilder}.
	 * 
	 * @return
	 */
	@SuppressWarnings('GrMethodMayBeStatic')
	protected IProcessingContextBuilder getTestProcessingContextBuilder() {

		return new WebProcessingContextBuilder()
	}

	/**
	 * Extension point for providing a custom reporter to act as delegate to this
	 * library's reporter which tracks test executions as a single test.  Uses a
	 * {@code ConsoleTestReporter} if not overridden.
	 * 
	 * @return Test reporter to use in execution.
	 */
	protected ITestReporter getTestReporter() {

		return new ConsoleTestReporter()
	}
}
